import { Link } from '@readium/shared-models/lib/models/publication/link';
import { IFrameLoader } from '../../iframe-loader';
import { CfiNavigationLogic } from '../cfi/cfi-navigation-logic';
import { ElementBlacklistedChecker } from '../cfi/element-checker';
import { CancellationToken } from '../types';
import { ViewSettings } from '../view-settings';
import { IContentView, SelfResizeCallbackType } from './content-view';
declare type IframeLoadedCallback = (success: boolean) => void;
export declare class R2ContentView implements IContentView {
    protected host: HTMLElement;
    protected iframeLoader: IFrameLoader;
    protected iframeContainer: HTMLElement;
    protected iframe: HTMLIFrameElement;
    protected iframeLoadedCallbacks: IframeLoadedCallback[];
    protected spineItem: Link;
    protected spineItemIndex: number;
    protected spineItemPgCount: number;
    protected ePubHtml: HTMLHtmlElement | null;
    protected ePubBody: HTMLBodyElement | null;
    protected useReadiumCss: boolean;
    protected useReadiumCssOverride: boolean;
    protected vs: ViewSettings;
    protected elementChecker: ElementBlacklistedChecker;
    protected cfiNavLogic: CfiNavigationLogic;
    constructor(loader: IFrameLoader, eleChecker: ElementBlacklistedChecker);
    render(): void;
    loadSpineItem(spineItem: Link, spineItemIndex: number, viewSettings: ViewSettings, token?: CancellationToken | undefined): Promise<void>;
    spineItemLoadedPromise(token?: CancellationToken | undefined): Promise<void>;
    unloadSpineItem(): void;
    attachToHost(host: HTMLElement): void;
    setViewSettings(viewSetting: ViewSettings): void;
    scale(scale: number): void;
    element(): HTMLElement;
    metaWidth(): number;
    metaHeight(): number;
    calculatedHeight(): number;
    spineItemPageCount(): number;
    getOffsetFromCfi(cfi: string): number;
    getOffsetFromElementId(cfi: string): number;
    getPageIndexOffsetFromCfi(cfi: string): number;
    getPageIndexOffsetFromElementId(elementId: string): number;
    getCfi(offsetMain: number, offset2nd: number, backward: boolean): string;
    getCfiFromElementId(elementId: string): string;
    onResize(): void;
    onSelfResize(callback: SelfResizeCallbackType): void;
    protected setupIframe(): void;
    protected hideIframe(): void;
    protected showIFrame(): void;
    protected iframeLoadedPromise(token?: CancellationToken): Promise<void>;
    protected onIframeLoaded(success: boolean): void;
    protected getHostSize(): [number, number] | null;
}
export {};
