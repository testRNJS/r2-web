import { Publication } from '../../streamer';
import { Location } from '../location';
import { IContentViewFactory } from './content-view/content-view-factory';
import { SpineItemView } from './spine-item-view';
import { CancellationToken, ZoomOptions } from './types';
import { View } from './view';
import { ViewSettings } from './view-settings';
import { PageProperty } from '@readium/shared-models/lib/models/publication/interfaces/properties-core';
export declare class PaginationInfo {
    spineItemIndex: number;
    spineItemPageCount: number;
    pageIndex: number;
    view: SpineItemView;
    offsetInView: number;
}
export declare class LayoutView extends View {
    private spineItemViewStatus;
    private spineItemViewSizes;
    private spineItemViewPageCounts;
    private host;
    private layoutRoot;
    private publication;
    private vs;
    private isViewSettingChanged;
    private loadedContentRange;
    private paginatedRange;
    private pageWidth;
    private pageHeight;
    private isPageSizeChanged;
    private inViewUpdate;
    private isVertical;
    private hasUnknownSizeSpineItemLoading;
    private readonly isFixedLayout;
    private zoomOption;
    private zoomScale;
    private spineItemViewFactory;
    private readonly isRtl;
    private numOfPagesPerSpread;
    constructor(pub: Publication, vs: ViewSettings, cvFactory: IContentViewFactory);
    reset(): void;
    getSpineItemView(spineItemIndex: number): SpineItemView | undefined;
    getSpineItemViewOffset(spineItemIndex: number): number | undefined;
    isSpineItemVisible(siIndex: number, viewOffset: number, viewportSize: number): boolean;
    getOffsetInSpineItemView(siIndex: number, viewOffset: number): number | undefined;
    findSpineItemIndexByHref(href: string): number;
    isRightToLeft(): boolean;
    setPageSize(width: number, height: number): void;
    setNumberOfPagesPerSpread(num: number): void;
    numberOfPagesPerSpread(): number;
    beginViewUpdate(): void;
    endViewUpdate(): void;
    updateViewSettings(): void;
    setZoom(option: ZoomOptions, scale: number): void;
    getZoomScale(): number;
    getZoomOption(): ZoomOptions;
    setVerticalLayout(v: boolean): void;
    isVerticalLayout(): boolean;
    render(): void;
    attachToHost(host: HTMLElement): void;
    containerElement(): HTMLElement;
    hasMoreAfterEnd(): boolean;
    hasMoreBeforeStart(): boolean;
    getLoadedStartPostion(): number;
    getLoadedEndPosition(): number;
    isEmpty(): boolean;
    loadedRangeLength(): number;
    paginatedLength(): number;
    getPaginationInfoAtOffset(offset: number): PaginationInfo[];
    getOffsetFromLocation(loc: Location): Promise<number | undefined>;
    getOffsetFromAnchor(href: string, elementId: string): Promise<number | undefined>;
    getCfiFromAnchor(href: string, elementId: string): string | undefined;
    ensureLoaded(token?: CancellationToken): Promise<void>;
    ensureConentLoadedAtRange(start: number, end: number, token?: CancellationToken): Promise<void>;
    ensureContentLoadedAtSpineItemRange(startIndex: number, endIndex: number, token?: CancellationToken): Promise<void>;
    adjustLoadedConentRangeToPositive(): number;
    showOnlySpineItemRange(spineItemIndex: number): void;
    visiblePages(start: number, end: number): [number, number][];
    arrangeDoublepageSpreads(pos: number): PageProperty | undefined;
    removeOutOfRangeSpineItems(start: number, end: number): void;
    private clearLoadedContent;
    private visualPageWidth;
    private visualPageHeight;
    private initSpineItemViews;
    private startViewStatus;
    private endViewStatus;
    private nextIndexAfterEnd;
    private nextIndexBeforeStart;
    private hasMoreKnownSizeAfterEnd;
    private hasMoreKnowSizeBeforeStart;
    private rePaginate;
    private updatePaginatedRange;
    private loadNewSpineItemAtEnd;
    private loadNewSpineItemIndexAtEnd;
    private loadNewSpineItemAtStart;
    private loadNewSpineItemIndexAtStart;
    private loadNewSpineItem;
    private onSpineItemLoaded;
    private postionSpineItemView;
    private addNewViewStatus;
    private getSpineItemViewStatusFromHref;
    private getLoadedSpineItemViewStatusFromHref;
    private adjustRange;
}
